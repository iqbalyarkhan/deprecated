{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## Intro\nTypescript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the development of large applications and transpiles to JavaScript. \n\n## Compiler\nLet's start at the compiler: programs are files that contain a bunch of text written by you, the programmer. That text is parsed by a special program called a compiler, which trans‐ forms it into an abstract syntax tree (AST), a data structure that ignores things like whitespace, comments, and where you stand on the tabs versus spaces debate. After the TypeScript Compiler generates an AST for your program—but before it emits code—it typechecks your code. The compiler then converts that AST to a lower-level representation called bytecode. You can feed that bytecode into another program called a runtime to evaluate it and get a result. So when you run a program, what you’re really doing is telling the runtime to evaluate the bytecode generated by the compiler from the AST parsed from your source code.\n\nWhere TypeScript is special is that instead of compiling straight to bytecode, TS compiles to JavaScript code. You then run that JavaScript code like you normally would—in your browser, or with NodeJS. \n\nThis typechecking is the magic behind TypeScript. It’s how TypeScript makes sure that your program works as you expect, that there aren’t obvious mistakes. \n\n## The Type System\nTo explicitly signal to TypeScript what your types are, use annotations. Annotations take the form value: type and tell the typechecker, “Hey! You see this value here? Its type is type.” Let’s look at a few examples (the comments following each line are the actual types inferred by TypeScript):\n\n```ts\nlet a: number = 1 // a is a number\nlet b: string = 'hello' // b is a string\nlet c: boolean[] = [true, false] // c is an array of booleans\n```\n\nAnd if you want TypeScript to infer your types for you, just leave them off and let TypeScript get to work:\n\n```ts\nlet a = 1 // a is a number\nlet b = 'hello' // b is a string\nlet c = [true, false] // c is an array of booleans\n```\n\nTypeScript is a gradually typed language. That means that TypeScript works best when it knows the types of everything in your program at compile time, but it doesn’t have to know every type in order to compile your program. Even in an untyped pro‐ gram TypeScript can infer some types for you and catch some mistakes, but without knowing the types for everything, it will let a lot of mistakes slip through to your users. TypeScript statically analyzes your code for errors, and shows them to you before you run it.\n\n## tsconfig.json\n\nEvery TypeScript project should include a file called tsconfig.json in its root directory. This tsconfig.json is where TypeScript projects define things like which files should be compiled, which directory to compile them to, and which version of JavaScript to emit.\n\n```ts\n{\n  \"compilerOptions\": {\n    //Which APIs should TSC assume exist in the environment you’ll be running your code in? This includes things like ES5’sFunction.prototype.bind, ES2015’sObject.assign, and the DOM’s document.querySelector.\n    \"lib\": [\"es2015\"], \n    // Which module system should TSC compile your code to (CommonJS, SystemJS, ES2015, etc.)?\n    \"module\": \"commonjs\", \n    // Which folder should TSC put your generated JavaScript code in?\n    \"outDir\": \"dist\", \n    \"sourceMap\": true,\n    //Be as strict as possible when checking for invalid code. This option enforces that all of your code is properly typed. We’ll be using it for all of the examples in the book, and you should use it for your TypeScript project too. \n    \"strict\": true,\n    //Which JavaScript version should TSC compile your code to (ES3, ES5, ES2015, ES2016, etc.)? \n    \"target\": \"es2015\"\n  }, \n  //# Which folders should TSC look in to find your TypeScript files?\n  \"include\": [\"src\"] \n}\n```\n\n## tslint.json\n\nYour project should also have a tslint.json file containing your TSLint configuration, codifying whatever stylistic conventions you want for your code (tabs versus spaces, etc.).\n\nThe following command will generate a tslint.json file with a default TSLint configuration:\n```bash\n./node_modules/.bin/tslint --init\n```\n\nYou can then add overrides to this to conform with your own coding style. For example, my tslint.json looks like this:\n\n```ts\n{\n  \"defaultSeverity\": \"error\", \n  \"extends\": [\n      \"tslint:recommended\"\n  ], \n  \"rules\": {\n    \"semicolon\": false,\n    \"trailing-comma\": false \n  }\n}\n\n```","excerpt":"Intro Typescript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the dev…","fields":{"slug":"/Typescript/"},"frontmatter":{"date":"Feb 10, 2023","title":"Typescript","tags":["react"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}