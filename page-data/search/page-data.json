{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## Intro\n\nWhen you sign up for AWS using your email and password, you're assigned a user called the `root` user. This user has unrestricted access to all resources in that account. If this account gets hacked, this account will be at the mercy of the hacker. The root user cannot be restricted. We want to be able to provide access to others that isn't without restrictions: for example, the BI department might need access to AWS QuickSight but not to AWS S3. This process of providing only required access is called Least Privileged Access. This is where IAM comes handy!\n\n## [IAM](https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html)\n\nIAM:\n\n- Is a global service that is globally resilient service. All data is replicated across all regions\n- Manages identities since it is an identity provider or **IDP**\n- Provides **authentication** (who is signed in?): I am who I say I am!\n- Provides **authorization** (who has permissions?) for AWS services. A service evaluates if an AWS request is allowed or denied. Access is denied by default and is allowed only when a policy explicitly grants access.\n\n## IAM Entities\n\n![users-groups-roles](users_groups_roles.png)\n\nUsing IAM, you can create IAM Users, IAM Groups and IAM Roles. Each have their own specific use-case:\n\n### IAM Users\n\nThe \"identity\" aspect of AWS Identity and Access Management (IAM) helps you with the question \"Who is that user?\", often referred to as authentication. Users are identities which represent humans that need access to your account. IAM users are not separate accounts; they are users within your account. Each user can have its own password for access to the AWS Management Console.\n\nIAM users are granted long term credentials to your AWS resources. As a best practice, you should require your human users to use temporary credentials when accessing AWS. You can use an identity provider for your human users to provide federated access to AWS accounts by assuming roles, which provide temporary credentials.\n\n### IAM Groups\n\nGroups are simply collections of related users. This is useful when you need to provide access to users who have similar roles in an org. For example, QuickSight access for all BAs in your BI group.\n\n### IAM Roles\n\nRoles help us provide permissions to:\n\n- AWS services to perform actions on our behalf. For example lambda in our account writing to S3 bucket in our account.\n- External services to our account. For example lambda in another account writing to S3 bucket in our account.\n\n### Best Practice\n\nAs a [best practice](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html), require human users to use federation with an identity provider to access AWS using temporary credentials. An additional best practice recommendation is to require workloads to use temporary credentials with IAM roles to access AWS. IAM users are to be used only in very limited scenarios where an IAM role cannot be assumed.\n\n## IAM Policies\n\nHow does IAM actually \"attach\" these permissions to the entities listed above? That's where IAM policies come into picture. Policies are JSON documents that define deny or allow rights. On its own, a policy document does nothing. Only when it is attached to an entity does it take affect.\n","excerpt":"Intro When you sign up for AWS using your email and password, you're assigned a user called the  user. This user has unrestricted access to…","fields":{"slug":"/IAM/"},"frontmatter":{"date":"Feb 15, 2023","title":"IAM","tags":["IAM","AWS"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Intro\n\nTypescript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the development of large applications and transpiles to JavaScript.\n\n## Compiler\n\nLet's start at the compiler: programs are files that contain a bunch of text written by you, the programmer. That text is parsed by a special program called a compiler, which trans‐ forms it into an abstract syntax tree (AST), a data structure that ignores things like whitespace, comments, and where you stand on the tabs versus spaces debate. After the TypeScript Compiler generates an AST for your program—but before it emits code—it typechecks your code. The compiler then converts that AST to a lower-level representation called bytecode. You can feed that bytecode into another program called a runtime to evaluate it and get a result. So when you run a program, what you’re really doing is telling the runtime to evaluate the bytecode generated by the compiler from the AST parsed from your source code.\n\nWhere TypeScript is special is that instead of compiling straight to bytecode, TS compiles to JavaScript code. You then run that JavaScript code like you normally would—in your browser, or with NodeJS.\n\nThis typechecking is the magic behind TypeScript. It’s how TypeScript makes sure that your program works as you expect, that there aren’t obvious mistakes.\n\n## The Type System\n\nTo explicitly signal to TypeScript what your types are, use annotations. Annotations take the form value: type and tell the typechecker, “Hey! You see this value here? Its type is type.” Let’s look at a few examples (the comments following each line are the actual types inferred by TypeScript):\n\n```tsx\nlet a: number = 1; // a is a number\nlet b: string = 'hello'; // b is a string\nlet c: boolean[] = [true, false]; // c is an array of booleans\n```\n\nAnd if you want TypeScript to infer your types for you, just leave them off and let TypeScript get to work:\n\n```tsx\nlet a = 1; // a is a number\nlet b = 'hello'; // b is a string\nlet c = [true, false]; // c is an array of booleans\n```\n\nTypeScript is a gradually typed language. That means that TypeScript works best when it knows the types of everything in your program at compile time, but it doesn’t have to know every type in order to compile your program. Even in an untyped pro‐ gram TypeScript can infer some types for you and catch some mistakes, but without knowing the types for everything, it will let a lot of mistakes slip through to your users. TypeScript statically analyzes your code for errors, and shows them to you before you run it.\n\n## tsconfig.json\n\nEvery TypeScript project should include a file called tsconfig.json in its root directory. This tsconfig.json is where TypeScript projects define things like which files should be compiled, which directory to compile them to, and which version of JavaScript to emit.\n\n```ts\n{\n  \"compilerOptions\": {\n    //Which APIs should TSC assume exist in the environment you’ll be running your code in? This includes things like ES5’sFunction.prototype.bind, ES2015’sObject.assign, and the DOM’s document.querySelector.\n    \"lib\": [\"es2015\"],\n    // Which module system should TSC compile your code to (CommonJS, SystemJS, ES2015, etc.)?\n    \"module\": \"commonjs\",\n    // Which folder should TSC put your generated JavaScript code in?\n    \"outDir\": \"dist\",\n    \"sourceMap\": true,\n    //Be as strict as possible when checking for invalid code. This option enforces that all of your code is properly typed. We’ll be using it for all of the examples in the book, and you should use it for your TypeScript project too.\n    \"strict\": true,\n    //Which JavaScript version should TSC compile your code to (ES3, ES5, ES2015, ES2016, etc.)?\n    \"target\": \"es2015\"\n  },\n  //# Which folders should TSC look in to find your TypeScript files?\n  \"include\": [\"src\"]\n}\n```\n\n## tslint.json\n\nYour project should also have a tslint.json file containing your TSLint configuration, codifying whatever stylistic conventions you want for your code (tabs versus spaces, etc.).\n\nThe following command will generate a tslint.json file with a default TSLint configuration:\n\n```bash\n./node_modules/.bin/tslint --init\n```\n\nYou can then add overrides to this to conform with your own coding style. For example, my tslint.json looks like this:\n\n```tsx\n{\n  \"defaultSeverity\": \"error\",\n  \"extends\": [\n      \"tslint:recommended\"\n  ],\n  \"rules\": {\n    \"semicolon\": false,\n    \"trailing-comma\": false\n  }\n}\n```\n\n## Component\n\nLet's look at our first react component:\n\n```tsx\nimport React from 'react';\nfunction App() {\n  //Do something\n  return (\n    <div>\n      <h1>Hello World</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nFirst, this React component, called `App` component, is just a JavaScript function. It’s commonly called function component, because there are other variations of React components.\n\nSecond, the App component doesn’t receive any parameters in its function signature yet. And third, the App component returns code that resembles HTML which is called JSX. The function component possess implementation details like any other JavaScript function (placeholder above is the //Do something comment).\n\nVariables defined in the function’s body will be re-defined each time this function runs, like all JavaScript functions:\n\n```tsx\nimport React from 'react';\nfunction App() {\n  const title = 'React';\n  return (\n    <div>\n      <h1>Hello World, this is ${title}</h1>\n    </div>\n  );\n}\nexport default App;\n```\n\nThe `title` variable can also be define outside the function. Running the above would print `Hello World, this is React`.\n\nLet's look at some more elements. An input field with a label can be defined as follows:\n\n```tsx\nimport React from 'react';\nconst title = 'React';\nfunction App() {\n  return (\n    <div>\n      <h1>Hello {title}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n    </div>\n  );\n}\nexport default App;\n```\n\nWe specified three HTML attributes here: htmlFor, id, and type. Where id and type should be familiar from native HTML, htmlFor might be new. The htmlFor reflects the for attribute in HTML. JSX replaces a handful of internal HTML attributes, but you can find all the supported HTML attributes33 in React’s documentation, which follow the camelCase naming convention.\n\nLet's modify our greeting a little:\n\n```tsx\nimport React from 'react';\n\nconst welcome = {\n  greeting: 'hey',\n  title: 'React',\n};\n\nfunction App() {\n  return (\n    <div>\n      <h1>\n        {welcome.greeting} {welcome.title}\n      </h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n    </div>\n  );\n}\nexport default App;\n```\n\nWe can also call functions from within the curly braces:\n\n```tsx\nimport React from 'react';\n\nfunction getGreeting() {\n  return 'hey React!';\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n    </div>\n  );\n}\nexport default App;\n```\n\n## Lists in React\n\nSo far we’ve rendered a few primitive variables in JSX; next we’ll render a list of items. We’ll experiment with sample data at first, then we’ll apply that to fetch data from a remote API. First, let’s define the array as a variable. As before, we can define a variable outside or inside the component. The following defines it outside:\n\n```tsx\n\nconst list = [\n  {\n    title: 'React',\n    url: 'https://reactjs.org/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://redux.js.org/',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 1,\n  },\n];\nfunction App() {...}\nexport default App;\n```\n\nEach item in the list has a title, a url, an author, an identifier (objectID), points – which indicate the popularity of an item – and a count of comments. Next, we’ll render the list within our JSX dynamically:\n\n```tsx\nfunction App() {\n  return (\n    <div>\n      <h1>My Hacker Stories</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n      <hr />\n      {/* render the list here */}\n    </div>\n  );\n}\n```\n\nBy assigning a key attribute to each list item’s element, React can identify modified items if the list changes (e.g. re-ordering). Fortunately, our list items come with an identifier:\n\n```tsx\nfunction App() {\n  return (\n    <div>\n      {' '}\n      ...\n      <hr />\n      {list.map(function (item) {\n        return <div key={item.objectID}>{item.title}</div>;\n      })}{' '}\n    </div>\n  );\n}\n```\n\nNote that we're using `item.ObjectID` as the `key` in our list. We avoid using the index of the item in the array to make sure the key attribute is a stable identifier. If the list changes its order, for example, React will not be able to identify the items properly. Here's what our code looks like right now:\n\n```tsx\nimport React from 'react';\n\nconst list = [\n  {\n    title: 'React',\n    url: 'https://reactjs.org/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://redux.js.org/',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 1,\n  },\n];\n\nfunction getGreeting() {\n  return 'hey React!';\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n      <hr />\n      {list.map(function (item) {\n        return <div key={item.objectID}>{item.title}</div>;\n      })}{' '}\n    </div>\n  );\n}\nexport default App;\n```\n\nWe can display multiple fields from our list instead of just the title like so:\n\n```tsx\nfunction App() {\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n      <hr />\n      {list.map(function (item) {\n        return (\n          <div key={item.objectID}>\n            <span>\n              <a href={item.url}>{item.title}</a>\n            </span>{' '}\n            written by {item.author}\n          </div>\n        );\n      })}{' '}\n    </div>\n  );\n}\n```\n\nThe component above is getting too complicated, let's create a new list component on its own. To do so, I'll export the list to its own file called `list.ts`. This is what our App component looks like:\n\n```tsx\nimport { List } from './List';\n\nfunction getGreeting() {\n  return 'hey React!';\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n      <hr />\n      <List />\n    </div>\n  );\n}\nexport default App;\n```\n\nNotice we're importing `List` from a separate file:\n\n```tsx\nconst list = [\n  {\n    title: 'React',\n    url: 'https://reactjs.org/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://redux.js.org/',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 1,\n  },\n];\n\nexport function List() {\n  return (\n    <div>\n      {list.map(function (item) {\n        return (\n          <div key={item.objectID}>\n            <span>\n              <a href={item.url}>{item.title}</a>\n            </span>{' '}\n            written by {item.author}\n          </div>\n        );\n      })}{' '}\n    </div>\n  );\n}\n```\n\nWith this example, we can see how components that encapsulate meaningful tasks can work for larger React applications.Larger React applications have component hierarchies (also called component trees). There is usually one uppermost entry point component (e.g. App) that spans a tree of components below it. The App is the parent component of the List, so the List is a child component of the App. In a component tree, the App is the root component, and the components that don’t render any other components are called leaf components (e.g. List). The App can have multiple children, as can the List. If the App has another child component, the additional child component is called a sibling component of the List.\n\n## index.js\n\nWe've been ignoring one important file in our project: `index.js`:\n\n```tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\nThere is imported library called `react-dom`, in which a ReactDOM.render() function uses an HTML node to replace it with JSX. The process integrates React into HTML. ReactDOM.render() expects two arguments; the first is to render the JSX. It creates an instance of your App component, though it can also pass simple JSX without any component instantiation.\n\nThe second argument specifies where the React application enters your HTML. It expects an element with an id='root', found in the public/index.html file. This is a basic HTML file.\n\n## onChange() handlers\n\nThe App component still has the input field and label, which we haven’t used. In HTML outside of JSX, input fields have an onchange handler. This is what our App component looks like right now:\n\n```tsx\nimport { List } from './List';\n\nfunction getGreeting() {\n  return 'hey React!';\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" />\n      <hr />\n      <List />\n    </div>\n  );\n}\nexport default App;\n```\n\nLet's define a handler function for the change event of the input field. This function can be passed to the `onChange` attribute (JSX named attribute) of the input field:\n\n```tsx\nimport { List } from './List';\n\nfunction getGreeting() {\n  return 'hey React!';\n}\n\nfunction App() {\n  //Handler function:\n  const handleChange = (event: any) => {\n    console.log(event);\n  };\n\n  return (\n    <div>\n      <h1>{getGreeting()}</h1>\n      <label htmlFor=\"search\">Search: </label>\n      <input id=\"search\" type=\"text\" onChange={handleChange} />\n      <hr />\n      <List />\n    </div>\n  );\n}\nexport default App;\n```\n","excerpt":"Intro Typescript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the dev…","fields":{"slug":"/Typescript/"},"frontmatter":{"date":"Feb 10, 2023","title":"React and Typescript","tags":["react"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}